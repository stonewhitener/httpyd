#!/usr/bin/env python3
import argparse
import logging
import netifaces
import selectors
import socket


logger = logging.getLogger(__name__)
handler = logging.StreamHandler()
handler.setLevel(logging.DEBUG)
logger.setLevel(logging.DEBUG)
logger.addHandler(handler)
logger.propagate = False


HTTP_PORT = 80

BUFFER_SIZE = 4096


def serve_forever(interface, port, poll_interval=0.5):
    # Set the IP address and the port number
    server_address = (netifaces.ifaddresses(interface)[netifaces.AF_INET][0]['addr'], port)
    # Create a server TCP socket
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
        # Allow to reuse address
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        # Bind the IP address and the port
        server_socket.bind(server_address)
        # Enable a server to accept connections
        server_socket.listen(socket.SOMAXCONN)
        print(f'Listening on {server_address[0]}:{server_address[1]}...')
        # Create a selector
        with selectors.DefaultSelector() as selector:
            # Resister the socket for selection, monitoring it for I/O events
            selector.register(server_socket.fileno(), selectors.EVENT_READ)
            # Serve forever
            while True:
                # Wait until the socket become readable
                ready = selector.select(poll_interval)
                if ready:
                    try:
                        # Accept a connection
                        client_socket, client_address = server_socket.accept()
                        # Receive a request from the socket
                        request = client_socket.recv(BUFFER_SIZE)
                        # Log for debugging
                        logger.debug(request.decode())
                        # Send the response using the client socket
                        client_socket.sendall(
                            f'HTTP/1.0 200 OK\r\n'
                            f'Content-Type: text/html\r\n\r\n'
                            f'<html>\n'
                            f'  <head>\n'
                            f'    <title>It works!</title>\n'
                            f'  </head>\n'
                            f'  <body>\n'
                            f'    <h1>It works!</h1>\n'
                            f'    <p>This is the default web page for this server.</p>\n'
                            f'    <p>The server is running on {server_address[0]}:{server_address[1]} \n'
                            f'       and you are from {client_address[0]}:{client_address[1]}.</p>\n'
                            f'  </body>\n'
                            f'</html>\n'.encode())
                        # Close the socket
                        client_socket.close()
                    except:
                        # Continue serving
                        continue


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='HTTPy server daemon')
    parser.add_argument('interface', type=str, help='interface name')
    parser.add_argument('--port', type=int, default=HTTP_PORT, help='port number (default port is 80)')
    args = parser.parse_args()
    serve_forever(args.interface, args.port)
